{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "SALL",
	"patterns": [		
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#supports"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#storages"
		},
		{
			"begin": "(?x)\n(?:\n  ^ |                  # beginning of line\n  (?:(?<!else|new|=))  # or word + space before name\n)\n((?:[A-Za-z_][A-Za-z0-9_]*::)*+~[A-Za-z_][A-Za-z0-9_]*) # actual name\n\\s*(\\()              # opening bracket",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.sal"
				},
				"2": {
					"name": "punctuation.definition.parameters.begin.c"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.end.c"
				}
			},
			"name": "meta.function.destructor.sal",
			"patterns": [
				{
					"include": "$base"
				}
			]
		},
		{
			"begin": "(?x)\n(?:\n  ^ |                  # beginning of line\n  (?:(?<!else|new|=))  # or word + space before name\n)\n((?:[A-Za-z_][A-Za-z0-9_]*::)*+~[A-Za-z_][A-Za-z0-9_]*) # actual name\n\\s*(\\()              # opening bracket",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.sal"
				},
				"2": {
					"name": "punctuation.definition.parameters.begin.c"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.end.c"
				}
			},
			"name": "meta.function.destructor.prototype.sal",
			"patterns": [
				{
					"include": "$base"
				}
			]
		},
		{
			"include": "source.c"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.sal",
					"match": "\\b(if|else|while|for|return|Loop|From|To|DownTo|Next)\\b"
				},				
				{
					"match": "(!|&&|\\|\\|)",
					"name": "keyword.operator.logical.sal"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.sal",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.sal",
					"match": "\\\\."
				}
			]
		},
		"supports": {
			"patterns": [
				{
					"name": "entity.name.tag.sal",
					"match": "\\b(Title|Calculation|Declarations|Functions|Program|StateMachines|WrapUp)\\b"
				},
				{
					"name": "support.function.sal",
					"match": "\\b(Zone|AssignRef|Add_to_Dicnt|Dicnt|Freeze|FreezeAndReset|SetAiFromDi|SetDiFromAi|GetDiCounterValue|SetDiCounterValue|Output|OutputQ|OutputQueuedControls|Trips_Rx|Closes_Rx|SetAiValue|SetFPAiValue|SetDiValue|CalcRaiseLower|Every|ConvertToSeconds|CorrectTime|GetLastSoe|MillisecondCount|GetTimeStampField|GetSoe|GetSoeTime|GetSystemTime|SoeDifference|TimeDelayOn|TimeDelayOff|Pulse|RetriggablePulse|TimeLeft|LL|HL|High_to_Low|Low_to_High|Int_to_FP|FP_to_Int|FP_Comp|FP_Add|FP_Sub|FP_Mul|FP_Div|FP_Sin|FP_Cos|FP_Exp|FP_Ln|FP_Pow|FP_Sqrt|File_Append_Char|File_Append_Token|File_Delete|File_Rename|StrToInt|Set_Flags|Clr_Flags|Chk_Flags|Get_Flags|GenDiEvent|GenAiEvent|GenFPAiEvent|pos|dplystr|dplyint|dplyflt|attrib|scrollup|clreol|clrscr)\\b"
				},
				{
					"name": "support.type.sal",
					"match": "\\b(Constant|Nonvolatile)\\b"
				},
				{
					"name": "support.variable.sal",
					"match": "\\b(State|Trip|Close|Raise|Lower|Setpoint)\\b"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"begin": "/\\*",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.sal"
						}
					},
					"end": "\\*/",
					"name": "comment.block.sal"
				}
			]
		},
		"constants": {
			"patterns": [				
				{
					"match":"\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b",
      				"name":"constant.numeric.sal"
				}
			]
		},
		"storages": {
			"patterns": [
				{
					"name": "storage.type.sal",
					"match": "\\b(Ai|Boolean|Control|Di|DiSoe|Float|FPAi|Int|Timer|ZoneVar|TimeStamp|AiRef|FPAiRef|DiRef|Soe|SoeSnapshot|Void)\\b"
				}				
			]
		}
	},
	"scopeName": "source.sal"
}